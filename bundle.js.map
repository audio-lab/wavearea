{
  "version": 3,
  "sources": ["node_modules/audioworklet-polyfill/src/index.js", "node_modules/audioworklet-polyfill/src/realm.js", "index.js"],
  "sourcesContent": ["/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport { Realm } from './realm';\n\nconst PARAMS = [];\nlet nextPort;\n\nif (typeof AudioWorkletNode !== 'function') {\n  self.AudioWorkletNode = function AudioWorkletNode (context, name, options) {\n    const processor = getProcessorsForContext(context)[name];\n    const outputChannels = options && options.outputChannelCount ? options.outputChannelCount[0] : 2;\n    const scriptProcessor = context.createScriptProcessor(undefined, 2, outputChannels);\n\n    scriptProcessor.parameters = new Map();\n    if (processor.properties) {\n      for (let i = 0; i < processor.properties.length; i++) {\n        const prop = processor.properties[i];\n        const node = context.createGain().gain;\n        node.value = prop.defaultValue;\n        // @TODO there's no good way to construct the proxy AudioParam here\n        scriptProcessor.parameters.set(prop.name, node);\n      }\n    }\n\n    const mc = new MessageChannel();\n    nextPort = mc.port2;\n    const inst = new processor.Processor(options || {});\n    nextPort = null;\n\n    scriptProcessor.port = mc.port1;\n    scriptProcessor.processor = processor;\n    scriptProcessor.instance = inst;\n    scriptProcessor.onaudioprocess = onAudioProcess;\n    return scriptProcessor;\n  };\n\n  Object.defineProperty((self.AudioContext || self.webkitAudioContext).prototype, 'audioWorklet', {\n    get () {\n      return this.$$audioWorklet || (this.$$audioWorklet = new self.AudioWorklet(this));\n    }\n  });\n\n  self.AudioWorklet = class AudioWorklet {\n    constructor (audioContext) {\n      this.$$context = audioContext;\n    }\n\n    addModule (url, options) {\n      return fetch(url).then(r => {\n        if (!r.ok) throw Error(r.status);\n        return r.text();\n      }).then(code => {\n        const context = {\n          sampleRate: 0,\n          currentTime: 0,\n          AudioWorkletProcessor () {\n            this.port = nextPort;\n          },\n          registerProcessor: (name, Processor) => {\n            const processors = getProcessorsForContext(this.$$context);\n            processors[name] = {\n              realm,\n              context,\n              Processor,\n              properties: Processor.parameterDescriptors || []\n            };\n          }\n        };\n        context.self = context;\n        const realm = new Realm(context, document.documentElement);\n        realm.exec(((options && options.transpile) || String)(code));\n        return null;\n      });\n    }\n  };\n}\n\nfunction onAudioProcess (e) {\n  const parameters = {};\n  let index = -1;\n  this.parameters.forEach((value, key) => {\n    const arr = PARAMS[++index] || (PARAMS[index] = new Float32Array(this.bufferSize));\n    // @TODO proper values here if possible\n    arr.fill(value.value);\n    parameters[key] = arr;\n  });\n  this.processor.realm.exec(\n    'self.sampleRate=sampleRate=' + this.context.sampleRate + ';' +\n    'self.currentTime=currentTime=' + this.context.currentTime\n  );\n  const inputs = channelToArray(e.inputBuffer);\n  const outputs = channelToArray(e.outputBuffer);\n  this.instance.process([inputs], [outputs], parameters);\n\n  // @todo - keepalive\n  // let ret = this.instance.process([inputs], [outputs], parameters);\n  // if (ret === true) { }\n}\n\nfunction channelToArray (ch) {\n  const out = [];\n  for (let i = 0; i < ch.numberOfChannels; i++) {\n    out[i] = ch.getChannelData(i);\n  }\n  return out;\n}\n\nfunction getProcessorsForContext (audioContext) {\n  return audioContext.$$processors || (audioContext.$$processors = {});\n}\n", "/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nexport function Realm (scope, parentElement) {\n  const frame = document.createElement('iframe');\n  frame.style.cssText = 'position:absolute;left:0;top:-999px;width:1px;height:1px;';\n  parentElement.appendChild(frame);\n  const win = frame.contentWindow;\n  const doc = win.document;\n  let vars = 'var window,$hook';\n  for (const i in win) {\n    if (!(i in scope) && i !== 'eval') {\n      vars += ',';\n      vars += i;\n    }\n  }\n  for (const i in scope) {\n    vars += ',';\n    vars += i;\n    vars += '=self.';\n    vars += i;\n  }\n  const script = doc.createElement('script');\n  script.appendChild(doc.createTextNode(\n    `function $hook(self,console) {\"use strict\";\n        ${vars};return function() {return eval(arguments[0])}}`\n  ));\n  doc.body.appendChild(script);\n  this.exec = win.$hook(scope, console);\n}\n", "import 'audioworklet-polyfill';\r\n\r\nconst wavearea = document.getElementById('wavearea')\r\n\r\nnavigator.mediaDevices.getUserMedia({audio: true}).then(init)\r\n\r\nfunction init (stream) {\r\n  const audioCtx = new AudioContext();\r\n  const source = audioCtx.createMediaStreamSource(stream);\r\n  const analyser = audioCtx.createAnalyser();\r\n  analyser.fftSize = 2048;\r\n  const bufferLength = analyser.frequencyBinCount;\r\n  const dataArray = new Float32Array(bufferLength);\r\n  source.connect(analyser);\r\n  // analyser.connect(audioCtx.destination);\r\n\r\n  let stop = false\r\n\r\n  requestAnimationFrame(function draw() {\r\n    analyser.getFloatTimeDomainData(dataArray);\r\n    let ssum = 0\r\n    for (let i = 0; i < dataArray.length; i++) ssum += dataArray[i] * dataArray[i]\r\n    const rms = Math.sqrt(ssum / dataArray.length)\r\n    wavearea.append( String.fromCharCode(0x0100 + Math.floor(rms * 100)))\r\n    if (!stop) requestAnimationFrame(draw)\r\n  })\r\n\r\n  setTimeout(() => {\r\n    stop = true\r\n    source.disconnect()\r\n  }, 40000)\r\n\r\n  // const chunks = []\r\n  // const mediaRecorder = new MediaRecorder(stream);\r\n  // mediaRecorder.ondataavailable = function(e) {\r\n  //   chunks.push(e.data);\r\n  //   console.log(e)\r\n  //   analyser.getByteTimeDomainData(dataArray);\r\n  // }\r\n  // mediaRecorder.start(analyser.fftSize/audioCtx.sampleRate)\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": []
}
